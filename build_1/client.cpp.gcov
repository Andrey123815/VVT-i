        -:    0:Source:/Users/yutfut/Desktop/VVT-i/source/client.cpp
        -:    0:Graph:../build_1/CMakeFiles/client.dir/source/client.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1://
        -:    2:// Created by Yut Fut on 18.11.2021.
        -:    3://
        -:    4:
        -:    5:#include "client.h"
        -:    6:
    #####:    7:Client::Client(){}
        -:    8:
    #####:    9:Client::~Client(){}
        -:   10:
    #####:   11:void Client::print(User &user) {
    #####:   12:    if (user.get_authorize()) {
    #####:   13:        std::cout << ">>> " << std::string(user.get_current_directory()) << "$:\t";
    #####:   14:    } else {
    #####:   15:        std::cout << ">>>\t";
        -:   16:    }
        -:   17:
    #####:   18:}
        -:   19:
    #####:   20:void help() {
    #####:   21:    std::cout << "не авторизованный пользователь\n"
        -:   22:                 "\tupload <email> <file name>\n"
        -:   23:                 "\tdownload <key>\n\n"
        -:   24:                 "авторизованный пользователь\n"
        -:   25:                 "\tregister <email> <password> <password>\n"
        -:   26:                 "\tlogin <email> <password>\n"
        -:   27:                 "\tlogout\n"
        -:   28:                 "\tcd <path>\n"
        -:   29:                 "\tls [<path>]\n"
        -:   30:                 "\tmkdir <name>\n"
        -:   31:                 "\trmdir <name>\n\n";
    #####:   32:}
        -:   33:
    #####:   34:int Client::role_command(const std::string& command, User &user) {
    #####:   35:    size_t pos = command.find_first_of(' ');
    #####:   36:    std::string first_part_command = command.substr(0, pos);
    #####:   37:    std::string rest_part_command = command.substr(pos + 1);
        -:   38:
    #####:   39:    switch (commands[first_part_command]) {
        -:   40:        case Commands::UPLOAD: {
    #####:   41:            if(first_part_command != rest_part_command) {
    #####:   42:                return upload(rest_part_command, user);
        -:   43:            }
    #####:   44:            return -1;
        -:   45:        }
        -:   46:        case Commands::DOWNLOAD: {
    #####:   47:            if(first_part_command != rest_part_command) {
    #####:   48:                return download(rest_part_command, user);
        -:   49:            }
    #####:   50:            return -1;
        -:   51:        }
        -:   52:        case Commands::REGISTER: {
    #####:   53:            if(first_part_command != rest_part_command) {
    #####:   54:                return user.register_user(rest_part_command);
        -:   55:            }
    #####:   56:            return -1;
        -:   57:        }
        -:   58:        case Commands::LOGIN: {
    #####:   59:            if(first_part_command != rest_part_command) {
    #####:   60:                return user.login(rest_part_command);
        -:   61:            }
    #####:   62:            return -1;
        -:   63:        }
        -:   64:        case Commands::LOGOUT: {
    #####:   65:            return user.logout();
        -:   66:        }
        -:   67:        case Commands::DIR: {
    #####:   68:            if(first_part_command != rest_part_command) {
    #####:   69:                return work_with_directory(first_part_command, rest_part_command, user);
        -:   70:            }
    #####:   71:            return -1;
        -:   72:        }
        -:   73:        case Commands::HELP: {
    #####:   74:            help();
    #####:   75:            return 0;
        -:   76:        }
        -:   77:        case Commands::EXIT: {
    #####:   78:            return 1;
        -:   79:        }
        -:   80:        default: {
    #####:   81:            std::cout << "Команды не существует" << std::endl;
    #####:   82:            return -1;
        -:   83:        }
        -:   84:    }
    #####:   85:}
        -:   86:
    #####:   87:void Client::run() {
    #####:   88:    commands[UPLOAD] = Commands::UPLOAD;
    #####:   89:    commands[DOWNLOAD] = Commands::DOWNLOAD;
    #####:   90:    commands[REGISTER] = Commands::REGISTER;
    #####:   91:    commands[LOGIN] = Commands::LOGIN;
    #####:   92:    commands[LOGOUT] = Commands::LOGOUT;
    #####:   93:    commands[CD] = Commands::DIR;
    #####:   94:    commands[LS] = Commands::DIR;
    #####:   95:    commands[MKDIR] = Commands::DIR;
    #####:   96:    commands[RMDIR] = Commands::DIR;
    #####:   97:    commands[EXIT] = Commands::EXIT;
    #####:   98:    commands[HELP] = Commands::HELP;
        -:   99:
    #####:  100:    User user;
        -:  101:
    #####:  102:    std::cout << "Welcome to VVTi!" << std::endl;
    #####:  103:    std::string command;
        -:  104:
    #####:  105:    std::vector<std::string> history;
        -:  106:
    #####:  107:    while (true) {
    #####:  108:        print(user);
        -:  109:
    #####:  110:        std::getline (std::cin, command);
        -:  111:
    #####:  112:        if (command.empty()) {
    #####:  113:            continue;
        -:  114:        }
        -:  115:
    #####:  116:        auto status = (Status) role_command(command, user);
    #####:  117:        switch (status){
        -:  118:            case Status::SUCCESS:
    #####:  119:                std::cout << "SUCСESS" << std::endl;
    #####:  120:                break;
        -:  121:            case Status::GOODBYE:
    #####:  122:                std::cout << "GOODBYE" << std::endl;
        -:  123:                return;
        -:  124:            default:
    #####:  125:                std::cout << "Ошибка ввода команды" << std::endl;
    #####:  126:                std::cout << "ERROR" << std::endl;
    #####:  127:                break;
        -:  128:        }
        -:  129:    }
        -:  130:
    #####:  131:}
        -:  132:
